##############################        POSDOC JOURNAL. JORGE ALEJANDRO TARANGO YONG         ########################################
##                                                                                                                               ##
## The purpose of this document is to record all (or at least the most) progress I've done during this investigation including:  ##
## - The main authors                                                                                                            ##
## - Record of preliminar meteors database                                                                                       ##
## - List of preliminar GPS stations                                                                                             ##
## - TODO list                                                                                                                   ##
## - Codes used to get graphs and other data                                                                                     ##
##                                                                                                                               ##
###################################################################################################################################

* Authors
- Jorge A. Tarango-Yong
- Mario Rodríguez-Martínez
- Raúl Gutiérrez Zalapa

* Base de datos meteoros (definitivo)						
+ Press C-c C-x C-c for full view. Press q in highlighted text to return to normal
+ Press C-x spc for selecting a rectangle						
+ List of constants:
  - Re: Radius of earth (in km)
  - hG: height of GLM satellites (in km)
  - phiG16: longitude of GLM-16 (in deg)
  - phiG17: longitude of GLM-17 (in deg)
  - A: constant to integrate GLM energy over space (normalized to Rn (see below)) (Jenniskens et al. 2018), doi: 100.1111/maps.13137
  - Rn: Distance from GLM satellite to lightning ellipsoid at nadir
  - rad: degrees to radians conversion factor
  - k: correction factor for considering the contribution of the band pass of GLM over the complete blackbody continuum curve (Jenniskens et al. 2018), doi: 100.1111/maps.13137
#+CONSTANTS: Re=6371 :: hG=35786.02 :: phiG16=-75.2 :: A=1.695e18 :: Rn=35780 :: phiG17=-137.2 :: rad=3.1416/180 :: k=1.018e3
| ID |      Fecha | Got RINEX | Got Kp index | Got GLM data | T_0 (GLM-16) | T_0 (GLM-17) | dt (GLM-16) | dt (GLM-17) |    dt |   s_dt | Latitud (GLM-16) | Latitud (GLM-17) | Longitud (GLM-16) | Longitud (GLM-17) | Latitud | Longitud | sig_latitude | sig_lon | f(lat, long, long_GLM16) | f(lat, long, long_GLM17) |      GLM-16 energy (J) |      GLM-17-energy (J) | Height (km) | R^2_GLM16 | R^2_GLM17 | Radiated Energy GLM-16 (J) | Radiated Energy GLM-17 (J) |
|----+------------+-----------+--------------+--------------+--------------+--------------+-------------+-------------+-------+--------+------------------+------------------+-------------------+-------------------+---------+----------+--------------+---------+--------------------------+--------------------------+------------------------+------------------------+-------------+-----------+-----------+----------------------------+----------------------------|
| 01 | 2019-05-23 | **        | **           | **           | 16:36:18.147 | 16:36:18.155 |       0.197 |       0.197 | 0.197 | 0.0000 |             24.3 |             24.3 |            -102.2 |            -101.0 |   24.30 |  -101.60 |        0.000 |   0.849 |               0.99993878 |               0.99991181 |  7.080500719563272e-13 |  4.150638352847435e-13 |          28 |    1.28e9 |    1.28e9 |                     1.22e9 |               2.5621350e13 |
| 02 | 2019-07-18 | **        | **           | **           | 14:30:30.131 | 14:30:30.131 |       0.058 |       0.058 | 0.058 | 0.0000 |             27.2 |             27.2 |            -103.7 |            -102.6 |   27.20 |  -103.15 |        0.000 |   0.778 |               0.99992799 |               0.99991013 | 3.1129787646355764e-13 | 3.0977190648089314e-13 |          72 |    1.28e9 |    1.28e9 |                     5.37e8 |               1.9121816e13 |
| 03 | 2019-08-10 | **        | **           | **           | 11:18:48.726 | 11:18:48.632 |       0.145 |       0.252 | 0.199 | 0.0757 |             21.5 |             21.5 |            -103.1 |            -101.9 |   21.50 |  -102.50 |        0.000 |   0.849 |               0.99994244 |               0.99992074 |  6.210697829444508e-13 | 1.0712309278304778e-12 |          92 |    1.27e9 |    1.27e9 |                     1.06e9 |               6.5609083e13 |
| 04 | 2019-10-03 | **        | **           | **           | 07:55:33.551 | 07:55:33.550 |       0.085 |       0.127 | 0.106 | 0.0297 |             25.6 |             25.7 |             -96.8 |             -95.7 |   25.65 |   -96.25 |        0.071 |   0.778 |               0.99994795 |               0.99988945 |  1.479303483161672e-13 |  2.770259572442234e-13 |          74 |    1.28e9 |    1.28e9 |                     2.55e8 |               1.7100452e13 |
| 05 | 2019-10-09 | **        | **           | **           | 06:08:11.205 | 06:08:11.206 |       0.108 |       0.097 | 0.103 | 0.0078 |             23.6 |             23.6 |            -112.1 |            -111.8 |   23.60 |  -111.95 |        0.000 |   0.212 |               0.99991099 |               0.99994423 | 1.3955176168359046e-12 |  8.595560315017904e-13 |          32 |    1.28e9 |    1.28e9 |                     2.41e9 |               5.3059274e13 |
| 06 | 2019-11-16 | **        | **           | **           | 10:14:13.554 | 10:14:13.656 |       0.102 |       0.103 | 0.103 | 0.0007 |             29.2 |             29.2 |            -103.3 |            -102.0 |   29.20 |  -102.65 |        0.000 |   0.919 |               0.99992381 |               0.99990296 |  4.232787697851629e-13 | 3.9114560059171877e-13 |          82 |    1.27e9 |    1.27e9 |                     7.25e8 |               2.3956276e13 |
| 07 | 2019-11-17 | **        | **           | **           | 15:36:01.594 | 15:36:01.584 |       0.113 |       0.118 | 0.116 | 0.0035 |             31.7 |             31.7 |            -118.5 |            -116.9 |   31.70 |  -117.70 |        0.000 |   1.131 |               0.99986640 |               0.99993426 |  1.449666669545249e-12 |  5.117496236627764e-13 |          88 |    1.27e9 |    1.27e9 |                     2.48e9 |               3.1342844e13 |
| 08 | 2019-11-19 | **        | **           | **           | 07:57:40.100 | 07:57:40.118 |       0.177 |       0.016 | 0.097 | 0.1138 |             20.0 |             20.0 |             -89.2 |             -87.6 |   20.00 |   -88.40 |        0.000 |   1.131 |               0.99997235 |               0.99986730 |  6.833250825127828e-14 | 4.4376146917849163e-14 |          99 |    1.27e9 |    1.27e9 |                     1.17e8 |               2.7178811e12 |
| 09 | 2019-11-26 | **        | **           | **           | 13:23:20.453 | 13:23:20.437 |       0.098 |       0.057 | 0.078 | 0.0290 |             23.9 |             23.9 |            -109.3 |            -108.1 |   23.90 |  -108.70 |        0.000 |   0.849 |               0.99991955 |               0.99993421 |  2.634275895650217e-13 |  8.954477775527033e-14 |          81 |    1.27e9 |    1.27e9 |                     4.51e8 |               5.4842991e12 |
| 10 | 2019-12-04 | **        | **           | **           | 09:42:54.880 | 09:42:54.877 |       0.171 |       0.175 | 0.173 | 0.0028 |             31.5 |             31.5 |            -114.3 |            -113.0 |   31.50 |  -113.65 |        0.000 |   0.919 |               0.99988304 |               0.99992679 |  1.938622765895668e-12 |  1.524757629654727e-12 |          77 |    1.28e9 |    1.28e9 |                     3.34e9 |               9.4121303e13 |
| 11 | 2019-12-15 | **        | **           | **           | 14:50:49.779 | 14:50:49.915 |       0.136 |       0.117 | 0.127 | 0.0134 |             27.7 |             27.7 |            -114.7 |            -113.5 |   27.70 |  -114.10 |        0.000 |   0.849 |               0.99989201 |               0.99993834 |  6.161296992576752e-13 | 2.9770126480938705e-13 |          78 |    1.28e9 |    1.28e9 |                     1.06e9 |               1.8376711e13 |
| 12 | 2019-12-29 | **        | **           | **           | 16:16:35.527 | 16:16:35.598 |       0.071 |       0.052 | 0.062 | 0.0134 |             29.6 |             29.6 |            -117.0 |            -115.7 |   29.60 |  -116.35 |        0.000 |   0.919 |               0.99987829 |               0.99993790 |   2.17488682754591e-13 |   7.41910681307072e-14 |          79 |    1.28e9 |    1.28e9 |                     3.75e8 |               4.5797180e12 |
| 13 | 2020-01-03 | **        | **           | **           | 14:10:17.704 | 14:10:17.584 |       0.119 |       0.107 | 0.113 | 0.0085 |             30.2 |             30.2 |            -118.3 |            -117.0 |   30.20 |  -117.65 |        0.000 |   0.919 |               0.99987150 |               0.99993875 |  6.855139495591029e-13 | 3.1314754237003386e-13 |          74 |    1.28e9 |    1.28e9 |                     1.18e9 |               1.9330190e13 |
| 14 | 2020-01-06 | **        | **           | **           | 16:39:27.920 | 16:39:27.917 |       0.115 |       0.121 | 0.118 | 0.0042 |             31.4 |             31.4 |            -108.9 |            -107.5 |   31.40 |  -108.20 |        0.000 |   0.990 |               0.99990157 |               0.99991333 |  9.521115792786327e-13 |  6.275060969231533e-13 |          81 |    1.27e9 |    1.27e9 |                     1.63e9 |               3.8432516e13 |
| 15 | 2020-01-15 | **        | **           | **           | 15:00:33.695 | 15:00:34.003 |       0.308 |       0.117 | 0.213 | 0.1351 |             19.4 |             19.5 |             -96.2 |             -94.9 |   19.45 |   -95.55 |        0.071 |   0.919 |               0.99996208 |               0.99989934 |  7.533539117646777e-13 |  5.875405258747977e-13 |          93 |    1.27e9 |    1.27e9 |                     1.29e9 |               3.5984767e13 |
| 16 | 2020-02-12 | **        | **           | **           | 09:25:40.508 | 09:25:40.490 |       0.194 |       0.226 | 0.210 | 0.0226 |             18.9 |             18.9 |             -94.1 |             -92.9 |   18.90 |   -93.50 |        0.000 |   0.849 |               0.99996685 |               0.99989238 |  4.662846866251004e-13 |   7.11847788770303e-13 |          90 |    1.27e9 |    1.27e9 |                     7.98e8 |               4.3598144e13 |
| 17 | 2020-03-03 | **        | **           | **           | 12:33:27.284 | 12:33:27.282 |       0.062 |       0.061 | 0.062 | 0.0007 |             18.2 |             18.3 |            -106.8 |            -105.9 |   18.25 |  -106.35 |        0.071 |   0.636 |               0.99993830 |               0.99993901 | 1.7320510377282553e-13 | 1.9590237923737543e-13 |          77 |    1.28e9 |    1.28e9 |                     2.99e8 |               1.2092799e13 |
| 18 | 2020-03-31 | **        | **           | **           | 19:31:52.080 | 19:31:52.103 |       0.145 |       0.064 | 0.105 | 0.0573 |             28.5 |             28.4 |            -112.5 |            -111.6 |   28.45 |  -112.05 |        0.071 |   0.636 |               0.99989777 |               0.99993217 |  4.019331742446309e-13 |  1.087721013104986e-13 |          61 |    1.28e9 |    1.28e9 |                     6.93e8 |               6.7143601e12 |
| 19 | 2020-04-08 | **        | **           | **           | 16:25:28.094 | 16:25:28.182 |       0.185 |       0.054 | 0.120 | 0.0926 |             26.1 |             26.1 |             -94.5 |             -93.3 |   26.10 |   -93.90 |        0.000 |   0.849 |               0.99995111 |               0.99987898 | 2.0687508876245494e-13 |  4.214678296162302e-14 |          78 |    1.28e9 |    1.28e9 |                     3.57e8 |               2.6016660e12 |
| 20 | 2020-04-18 | **        | **           | **           | 17:43:25.270 | 17:43:25.268 |       0.146 |       0.131 | 0.139 | 0.0106 |             29.0 |             29.0 |            -107.2 |            -105.9 |   29.00 |  -106.55 |        0.000 |   0.919 |               0.99991347 |               0.99991553 | 3.1668414423809794e-13 |   3.10458970407003e-13 |          82 |    1.27e9 |    1.27e9 |                     5.42e8 |               1.9014507e13 |
| 21 | 2020-04-20 | **        | **           | **           | 16:05:22.001 | 16:05:22:191 |       0.435 |       0.201 | 0.318 | 0.1655 |             28.1 |             28.2 |             -98.6 |             -97.1 |   28.15 |   -97.85 |        0.071 |   1.061 |               0.99993796 |               0.99988850 | 2.1191121272541304e-12 |  1.825984418477952e-12 |          88 |    1.27e9 |    1.27e9 |                     3.63e9 |               1.1183505e14 |
| 22 | 2020-04-25 | **        | **           | **           | 11:03:09.626 | 11:03:09.530 |       0.265 |       0.380 | 0.323 | 0.0813 |             32.1 |             32.2 |            -112.4 |            -110.8 |   32.15 |  -111.60 |        0.071 |   1.131 |               0.99988799 |               0.99991956 |  1.417340866060915e-12 |  2.232950304524486e-12 |          84 |    1.27e9 |    1.27e9 |                     2.43e9 |               1.3676026e14 |
| 23 | 2020-04-28 | **        | **           | **           | 05:43:16.682 | 05:43:16.676 |       0.801 |       0.818 | 0.810 | 0.0120 |             19.9 |             19.9 |            -110.2 |            -110.0 |   19.90 |  -110.10 |        0.000 |   0.141 |               0.99992479 |               0.99994730 | 1.0178255724628665e-11 |  9.224888665035712e-12 |          29 |    1.28e9 |    1.28e9 |                    1.76e10 |               5.6944036e14 |
| 24 | 2020-05-08 | **        | **           | **           | 10:06:16.988 | 10:06:16.942 |       0.437 |       0.543 | 0.490 | 0.0750 |             21.6 |             21.6 |             -93.0 |             -91.8 |   21.60 |   -92.40 |        0.000 |   0.849 |               0.99996365 |               0.99988273 | 2.2619171697132558e-12 |  6.268410264980247e-12 |          81 |    1.27e9 |    1.27e9 |                     3.87e9 |               3.8391783e14 |
| 25 | 2020-07-15 | **        | **           | **           | 19:58:28.112 | 19:58:28.173 |       0.728 |       0.658 | 0.693 | 0.0495 |             24.0 |             24.0 |            -108.7 |            -108.0 |   24.00 |  -108.35 |        0.000 |   0.495 |               0.99992121 |               0.99993372 | 1.3059874702513091e-12 |  6.913835089355929e-13 |          53 |    1.28e9 |    1.28e9 |                     2.25e9 |               4.2678204e13 |
| 26 | 2020-08-07 | **        | **           | **           | 13:29:57.252 | 13:29:57:071 |       0.167 |       0.159 | 0.163 | 0.0057 |             28.8 |             28.8 |            -106.7 |            -105.4 |   28.80 |  -106.05 |        0.000 |   0.919 |               0.99991548 |               0.99991460 |  8.954331725010835e-13 |  6.352236706573085e-13 |          89 |    1.27e9 |    1.27e9 |                     1.53e9 |               3.8905190e13 |
| 27 | 2020-09-13 | **        | **           | **           | 16:41:59.056 | 16:41:59.051 |       0.178 |       0.189 | 0.184 | 0.0078 |             28.4 |             28.5 |            -114.4 |            -113.1 |   28.45 |  -113.75 |        0.071 |   0.919 |               0.99989129 |               0.99993537 |  6.475592424368523e-13 |  5.786823260661331e-13 |          85 |    1.27e9 |    1.27e9 |                     1.11e9 |               3.5442234e13 |
| 28 | 2020-09-30 | **        | **           | **           | 12:28:11.755 | 12:28:11.748 |       0.094 |       0.105 | 0.100 | 0.0078 |             24.9 |             24.9 |            -111.5 |            -110.3 |   24.90 |  -110.90 |        0.000 |   0.849 |               0.99991010 |               0.99993766 |  8.547862356231333e-13 |   7.27027492615035e-13 |          83 |    1.27e9 |    1.27e9 |                     1.46e9 |               4.4527847e13 |
| 29 | 2020-11-16 | **        | **           | **           | 09:36:04.204 | 09:36:04.187 |       0.386 |       0.405 | 0.396 | 0.0134 |             20.3 |             20.3 |            -101.2 |             -99.9 |   20.30 |  -100.55 |        0.000 |   0.919 |               0.99994952 |               0.99991633 |  3.754678744599022e-12 |  5.319998241614338e-12 |         106 |    1.27e9 |    1.27e9 |                     6.43e9 |               3.2583096e14 |
| 30 | 2020-11-17 | **        | **           | **           | 12:53:41.826 | 12:53:41.816 |       0.385 |       0.422 | 0.404 | 0.0262 |             23.0 |             23.0 |            -103.1 |            -101.8 |   23.00 |  -102.45 |        0.000 |   0.919 |               0.99993934 |               0.99991732 |  4.463608461879112e-12 |  5.623754358386713e-12 |          93 |    1.27e9 |    1.27e9 |                     7.64e9 |               3.4443495e14 |
| 31 | 2020-12-19 | **        | **           | **           | 10:18:14.250 | 10:18:14.614 |       0.328 |       0.485 | 0.407 | 0.1110 |             21.9 |             22.0 |            -102.3 |            -100.9 |   21.95 |  -101.60 |        0.071 |   0.990 |               0.99994368 |               0.99991641 |  4.433293600678048e-12 |  4.773030608716246e-12 |          98 |    1.27e9 |    1.27e9 |                     7.59e9 |               2.9233114e14 |
| 32 | 2020-12-23 | **        | **           | **           | 09:43:01.374 | 09:43:01.375 |       0.147 |       0.149 | 0.148 | 0.0014 |             25.8 |             25.7 |            -111.8 |            -110.7 |   25.75 |  -111.25 |        0.071 |   0.778 |               0.99990697 |               0.99993678 |  7.249906845925338e-13 |  5.998020015149864e-13 |          81 |    1.27e9 |    1.27e9 |                     1.24e9 |               3.6735739e13 |
| 33 | 2020-12-29 | **        | **           | **           | 15:20:54.399 | 15:20:54.282 |       0.117 |       0.119 | 0.118 | 0.0014 |             16.8 |             16.8 |            -102.7 |            -101.7 |   16.80 |  -102.20 |        0.000 |   0.707 |               0.99995182 |               0.99992844 |  7.955155609684707e-13 |  7.937009630068694e-13 |          81 |    1.27e9 |    1.27e9 |                     1.36e9 |               4.8611360e13 |
| 34 | 2021-03-31 | **        | **           | **           | 09:01:17.547 | 09:01:17.978 |       0.971 |       0.535 | 0.753 | 0.3083 |             20.1 |             20.2 |             -93.1 |             -92.8 |   20.15 |   -92.95 |        0.071 |   0.212 |               0.99996639 |               0.99988961 | 3.9079678172826326e-12 |  5.546622984700175e-12 |          24 |    1.28e9 |    1.28e9 |                     6.74e9 |               3.4238581e14 |
#+TBLFM: $10=vmean($8..$9);f3::$11=vsdev($8..$9);f4::$16=vmean($12..$13);f2::$17=vmean($14..$15);f2::$18=vsdev($12..$13);f3::$19=vsdev($14..$15);f3::$20=cos($rad*$12)*cos($rad*($phiG16-$14))::$21=cos($rad*$13)*cos($rad*($phiG17-$15))::$25=2*$Re**2*(1-$20)*2+$Re*$hG*(1-$20)+$hG**2-2*$hG*$20*$24;s3::$26=2*$Re**2*(1-$21)+2*$Re*$hG*(1-$21)+$hG**2-2*$hG*$24*$21;s3::$27=$22*$A*$k*$25/$Rn**2;s3::$28=$23*$A*$k*$26/$Rn

* TODO list 
  - [X] upload journal.org to github
  - [X] Obtain relevant statistical parameters and graphs
    - [X] Average duration of events (and std)
    - [X] dispersion of latitude and longitude
  - [-] Plot positions of events in a map
    - [X] Add ID numbers to events
    - [ ] More aestetic improvements
    - [X] Add to paper
  - [X] Update table in paper
  - [-] Work in presentation
    - [X] General structure
    - [X] Work in individual sections
      - [X] Introduction
      - [X] Database
      - [X] Preliminary results
      - [X] Future Work
    - [X] Table(s) with GPS stations
    - [X] TEC maps like Chelyabinsk paper
      - [X] Add title, labels and other improvements
      - [X] Deal with No data rows.
      - [X] Download and process with GPS Gopi the remaining events
      - [X] Latitude vs time plots
      - [X] Include previous and next day data
      - [X] Add start time to second panel
    - [X] Get Kp index data
      - [X] Code to plot Kp index for desired dates
      - [X] Obtain graphs for meteors sample
    - [X] Correct typos in meteors data
    - [ ] Work in wavelet transforms
      - [ ] Study paper
      - [ ] Adapt code to our work
    - [-] Compute meteor trajectories with GLM data
      - [X] Download GLM data
      - [X] Plot trajectory into vTEC maps
	- [X] Use stereo data. Use mean for position and standard deviation for error margins
      - [ ] Discard events where the Kp index is too high
      - [ ] Identify ionospheric perturbations in vTEC maps
    - [ ] Try solutions of the 2D wave equation in polar coordinates.
    - [X] Include enrgy otput to meteors table and send to Raul
    - [X] Estimate break point height (taken from bolides descriptions)
    - [X] Fill stations table in paper and give format
    - [ ] Improve quality
    - [ ] Write about meteor properties and the othe stuff i wrote in my report
    - [ ] Work in graphs TEC vs time and Dst index vs time
      
** DONE Documentos para ingreso al SNI
   - [ ] Publicaciones
   - [X] Documentación que pruebe que impartí clases en:
     - [X] Liceo
     - [X] ENES
* UNAVCO Data users resposibilities
Responsibilities of the data users when writing scientiﬁc publications include the following: Data users that are identiﬁed in 
the archive (i.e., UNAVCO) as part of an ongoing project should always consult the appropriate PI for permission. *If the data 
user is automatically downloading data from the archive via software, this does not excuse the user from manually checking to 
make sure that the data are not part of an ongoing project. Also, when the data are not part of an ongoing project, the source 
of the data must be cited—not just the data archive but, where appropriate, the PI who collected the data via an appropriate pri-
mary publication, a digital object identiﬁer (DOI), or other method as directed by the data collector.*
* Source of Dst index
World Data Center for Geomagnetism, Kyoto
Dst index service
 operated by
Data Analysis Center for Geomagnetism and Space Magnetism
Graduate School of Science, Kyoto University
Kitashirakawa-Oiwake Cho, Sakyo-ku
Kyoto 606-8502, JAPAN
* UNAVCO Station DOIs
| Station | DOI                               | Cite Article (if apply)                                                                                                                                                                           |
|---------+-----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| BAR1    | https://doi.org/10.7283/T5668BHN  | https://doi.org/10.1785/0120000912                                                                                                                                                                |
| BLYT    | https://doi.org/10.7283/T5HT2MKK  | https://doi.org/10.1785/0120000912                                                                                                                                                                |
| CN23    | https://doi.org/10.7283/T5Q23XJH  | None available                                                                                                                                                                                    |
| CN25    | https://doi.org/10.7283/T57W69G7  | None available                                                                                                                                                                                    |
| GCFS    | https://doi.org/10.7gcfs283/7ETV-X536 | None available                                                                                                                                                                                    |
| GMPK    | https://doi.org/10.7283/WCHN-H687 | https://doi.org/10.1785/0120000912                                                                                                                                                                |
| GUAT    | https://doi.org/10.7283/KH2R-K704 | https://doi.org/10.1130/GES02243.1                                                                                                                                                                |
| GUAX    | https://doi.org/10.7283/T5GX48T2  | https://doi.org/10.1785/0120000912                                                                                                                                                                |
| IAGX    | https://doi.org/10.7283/DGWN-A627 | None available                                                                                                                                                                                    |
| INEG    | NO DOI were found                 | None available                                                                                                                                                                                    |
| KVTX    | https://doi.org/10.7283/T5J38QH8  | None available                                                                                                                                                                                    |
| MDO1    | NO DOI were found                 | None available                                                                                                                                                                                    |
| MGO5    | NO DOI were found                 | None available                                                                                                                                                                                    |
| MGW3    | no DOI were found                 | None available                                                                                                                                                                                    |
| OXTH    | https://doi.org/10.7283/T5Q81B5V  | None available                                                                                                                                                                                    |
| OXUM    | https://doi.org/10.7283/T5J964RP  | http://dx.doi.org/10.1007/s00024-015-1211-x                                                                                                                                                       |
| P001    | https://doi.org/10.7283/T5DR2SGP  | None available                                                                                                                                                                                    |
| P014    | https://doi.org/10.7283/T5DJ5CMK  | None available                                                                                                                                                                                    |
| P807    | https://doi.org/10.7283/T5TQ5ZKM  | None available                                                                                                                                                                                    |
| PLPX    | https://doi.org/10.7283/T5K64G3T  | None available                                                                                                                                                                                    |
| PTEX    | https://doi.org/10.7283/T5610XBP  | None available                                                                                                                                                                                    |
| RG06    | https://doi.org/10.7283/T5668BFR  | None available                                                                                                                                                                                    |
| SG33    | https://doi.org/10.7283/T50863KQ  | None available                                                                                                                                                                                    |
| TNAM    | https://doi.org/10.7283/T5QF8R4R  | None available                                                                                                                                                                                    |
| TNAT    | https://doi.org/10.7283/T5G15Z4S  | None available                                                                                                                                                                                    |
| TNBA    | https://doi.org/10.7283/T57M0688  | None available                                                                                                                                                                                    |
| TNCC    | https://doi.org/10.7283/T50R9MSK  | None available                                                                                                                                                                                    |
| TNCM    | https://doi.org/10.7283/T5B856FW  | None available                                                                                                                                                                                    |
| TNCN    | https://doi.org/10.7283/T5610XQM  | None available                                                                                                                                                                                    |
| TNCU    | https://doi.org/10.7283/T5V69GV2  | None available                                                                                                                                                                                    |
| TNGF    | https://doi.org/10.7283/T53X851M  | None available                                                                                                                                                                                    |
| TNHM    | https://doi.org/10.7283/T5KP80FV  | None available                                                                                                                                                                                    |
| TNMS    | https://doi.org/10.7283/T56H4FQ5  | None available                                                                                                                                                                                    |
| TNNP    | https://doi.org/10.7283/T5N29V96  | None available                                                                                                                                                                                    |
| TNNX    | https://doi.org/10.7283/T52R3PZ0  | None available                                                                                                                                                                                    |
| TNPP    | https://doi.org/10.7283/T5CC0Z0M  | None available                                                                                                                                                                                    |
| TNSJ    | https://doi.org/10.7283/T59S1PF1  | None available                                                                                                                                                                                    |
| TSFX    | https://doi.org/10.7283/AGEA-2G27 | None available                                                                                                                                                                                    |
| UAGU    | https://doi.org/10.7283/T5513WK7  | None available                                                                                                                                                                                    |
| UCOE    | https://doi.org/10.7283/T51834VW  | http://dx.doi.org/10.1007/s00024-015-1211-x                                                                                                                                                       |
| UGEO    | https://doi.org/10.7283/T58S4N9N  | B. Marquez-Azua, E. Cabral-Cano, F. Correa-Mora and C. DeMets, 2004. A model for Mexican neotectonics based on Nationwide GPS measurements, 1993-2001, Geofisica Internacional, v. 43, p.319-330. |
| UHSL    | https://doi.org/10.7283/T55X271S  | None available                                                                                                                                                                                    |
| UHWL    | https://doi.org/10.7283/T53R0R5P  | None available                                                                                                                                                                                    |
| UNPM    | https://doi.org/10.7283/J1GD-5S40 | None available                                                                                                                                                                                    |
| USMX    | https://doi.org/10.7283/T5W957CQ  | None available                                                                                                                                                                                    |
| UXAL    | https://doi.org/10.7283/T5DJ5D1C  | http://dx.doi.org/10.1007/s00024-015-1211-x                                                                                                                                                       |
| WEPD    | https://doi.org/10.7283/T5NZ85RB  | None available                                                                                                                                                                                    |
| WMOK    | https://doi.org/10.7283/T59021Q6  | None available                                                                                                                                                                                    |
| WWMT    | https://doi.org/10.7283/T5H993F2  | https://doi.org/10.1785/0120000912                                                                                                                                                                |
| YESX    | https://doi.org/10.7283/T5RJ4GPF  | None available                                                                                                                                                                                    |

* Codes
+ Tangle with C-c C-v t
+ Use C-c ' to edit code

#+NAME: plot_mex_map
#+BEGIN_SRC python :eval no :tangle ./plot_meteors.py

# Mexico map plotter
# The main idea of this program was taken from 
# https://towardsdatascience.com/mapping-with-matplotlib-pandas-geopandas-and-basemap-in-python-d11b57ab5dac
# By Ashwani Dhankhar 
# And the shape file for Mexico from CONABIO
# http://www.conabio.gob.mx/informacion/metadata/gis/destdv250k_2gw.xml?_xsl=/db/meadata/xsl/fgdc_html.xsl&_indent=no

import seaborn as sns
import numpy as np
import pandas as pd
import shapefile as shp
import matplotlib.pyplot as plt
from plotfullmap import plot_map
import argparse
from astropy.table import Table
import glob
import matplotlib.cm as cm


# set figure style
sns.set_style("whitegrid") 
sns.mpl.rc("figure", figsize=(10,6))

# Read shape file of Mexico map
sf = shp.Reader("map.shp")
plot_map(sf)


# Read meteors_database

f = Table.read("meteors_database.tab", format="ascii")

# plot positions plus uncertainties in the map

plt.errorbar(f["Longitud"], f["Latitud"], xerr=f["sig_lon"], yerr=f["sig_latitude"], fmt="bo", capsize=3)
# Offset of labels
x_off = [10, 10, 10, 10, 10, 10, 10, 10, -10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -10, -10, 10, 10, 10, 10, 10, 10, 10, 10, -10, 10, -10, 10, 10]
y_off = [10, 10, -10, 10, -10, 10, 10, 10, 10, -10, -10, -10, 10, 10, 10, -10, -10, 10, 10, 10, 10, 10, 10, 10, -10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
for i in range(len(f["ID"])):
    plt.annotate(f["ID"][i], (f["Longitud"][i], f["Latitud"][i]), textcoords="offset points", color="w",
    xytext=(x_off[i], y_off[i]), ha="center", bbox=dict(boxstyle="round", pad=0.5, fc="b", alpha=0.7))
ax = plt.gca()
ax.set_aspect('equal', adjustable='box')

plt.savefig("meteors_map.pdf")

#+END_SRC 

#+NAME: plot_GPS_map
#+BEGIN_SRC python :eval no :tangle ./plot_stations.py
# Mexico map plotter
# The main idea of this program was taken from 
# https://towardsdatascience.com/mapping-with-matplotlib-pandas-geopandas-and-basemap-in-python-d11b57ab5dac
# By Ashwani Dhankhar 
# And the shape file for Mexico from CONABIO
# http://www.conabio.gob.mx/informacion/metadata/gis/destdv250k_2gw.xml?_xsl=/db/meadata/xsl/fgdc_html.xsl&_indent=no

# The goal of this program was settled to plot event trajectory from GLM data and the stations that were used to get the RINEX data 

import seaborn as sns
import numpy as np
import pandas as pd
import shapefile as shp
import matplotlib.pyplot as plt
from plotfullmap import plot_map
import argparse
from astropy.table import Table
import glob
import argparse

# Load desired date from command line

parser = argparse.ArgumentParser(
  description=""" Choose a file to work""")


parser.add_argument('--date', type=str, default='2000-01-01',
				 help='Choose date. Format: yyyy-mm-dd')



cmd_args = parser.parse_args()
date = cmd_args.date


directory = "./data/"+date+"/GLM/"


# set figure style
sns.set_style("whitegrid") 
sns.mpl.rc("figure", figsize=(10,6))

# Read shape file of Mexico map
sf = shp.Reader("map.shp")
plot_map(sf)

# Read stations positions table

stations_pos = Table.read("station_data.tab", format="ascii")

# Develop dictionaries with events positions, their respective stations.

dates_stations_dict = {"2019-05-23":("KVTX", "TNCU", "UAGU"), "2019-07-18":("KVTX", "MDO1", "TNCU", "UAGU"), "2019-08-10":("KVTX", "TNCU", "UAGU", "UCOE", "UGEO"), "2019-10-03":("KVTX", "UAGU", "UXAL"), "2019-10-09":("GUAX", "TNBA", "TNHM","TNMS"), "2019-11-17":("GUAX", "TNBA", "PTEX", "TSFX", "TNPP", "P001", "BAR1", "WWMT"), "2019-11-16":("KVTX", "P807", "SG33", "TNCU", "UAGU"), "2019-11-19": ("CN23", "GCFS", "UNPM"), "2019-11-26":("TNBA", "TNHM", "TNMS", "UAGU", "YESX"), "2019-12-04":("GMPK", "IAGX", "P014", "PLPX", "TNHM", "TNPP"), "2019-12-15":("GUAX", "TNBA", "TNCU", "TNHM", "TNMS", "UAGU", "YESX"), "2019-12-29":("BAR1", "BLYT", "GUAX", "P014", "PTEX", "TNBA", "TNHM", "USMX", "WWMT"), "2020-01-03":("BAR1", "BLYT", "GUAX", "P014", "PTEX", "TNBA", "TNHM", "USMX", "WWMT"), "2020-01-06":("P014", "P807", "RG07", "TNCU", "USMX", "YESX"), "2020-01-15":("CN23", "CN25", "OXTH", "TNAT", "TNNX", "UNPM", "UXAL"), "2020-02-12":("CN23", "GUAT", "UNPM", "OXTH", "TNNX", "UXAL"), "2020-03-03":("TNAM", "TNCC", "TNCM", "TNMS"), "2020-03-31":("GUAX", "TNCU", "TNHM", "TNPP"), "2020-04-08":("KVTX", "MGW3", "UHSL", "UNPM", "UXAL"), "2020-04-18":("KVTX", "SG33", "TNCU", "TNHM", "UAGU", "YESX"), "2020-04-20":("KVTX", "MGO5", "MGW3", "P807", "WEPD", "WMOK"), "2020-04-25":("P001", "P014", "RG06", "TNPP", "USMX"), "2020-04-28":("TNCM", "TNNP", "YESX"), "2020-05-08":("KVTX", "MGW3", "UNPM", "UXAL"), "2020-07-15":("GUAX", "INEG", "TNAM", "TNCU", "TNHM", "TNMS", "YESX"), "2020-08-07":("INEG", "KVTX", "MGO5", "SG33", "TNCU", "USMX"), "2020-09-13":("GUAX", "PTEX", "TNHM", "TSFX"), "2020-09-30":("GUAX", "INEG", "TNAM", "TNCU", "TNHM", "USMX"), "2020-11-16":("INEG", "TNAM", "TNCN", "TNGF", "UCOE"), "2020-11-17":("INEG", "P807", "TNAM", "TNCU", "UCOE"), "2020-12-19":("INEG", "TNAM", "TNCU", "UCOE", "UHWL", "UXAL"), "2020-12-23":("GUAX", "PTEX", "TNHM", "TSFX"), "2020-12-29":("TNCN", "TNGF", "TNNX", "TNSJ"), "2021-03-31":("OXUM", "TGMX", "TNNX", "UXAL")}

# Plot stations positions

stations = dates_stations_dict[date]

for station in stations:
    mask = stations_pos["Site"] == station
    plt.plot(stations_pos["Longitude"][mask], stations_pos["Latitude"][mask], "go")
    plt.annotate(station, (stations_pos["Longitude"][mask][0], stations_pos["Latitude"][mask][0]),
			  textcoords="offset points", color="w", xytext=(10, 10), ha="center", bbox=dict(boxstyle="round", pad=0.5, fc="g", alpha=0.7))


# Plot bolide trajectory

GLM16_file = open(directory+"GLM-16-data.csv")
GLM17_file = open(directory+"GLM-17-data.csv")

for i in range(10): # skip unneeded data
    GLM16_file.readline()
    GLM17_file.readline()

GLM16_data = GLM16_file.readlines()
GLM17_data = GLM17_file.readlines()
GLM16_table = Table.read(GLM16_data, format="ascii")
GLM17_table = Table.read(GLM17_data, format="ascii")

f1_longitude, f1_latitude = GLM16_table["longitude"], GLM16_table["latitude"]
f2_longitude, f2_latitude = GLM17_table["longitude"], GLM17_table["latitude"]


fit_coord1 = np.polyfit(f1_longitude, f1_latitude, 1)
fit_coord2 = np.polyfit(f2_longitude, f2_latitude, 1)


poly1 = np.poly1d(fit_coord1)
poly2 = np.poly1d(fit_coord2)

plt.plot([f1_longitude[0]-2, f1_longitude[-1]], [poly1(f1_longitude[0]-2), poly1(f1_longitude[-1])], "r--")
plt.plot([f2_longitude[0]-2, f2_longitude[-1]], [poly2(f2_longitude[0]-2), poly2(f2_longitude[-1])], "r--")

plt.plot([0.5*(f1_longitude[0]+f2_longitude[0])-2, 0.5*(f1_longitude[-1]+f2_longitude[-1])], [0.5*(poly1(f1_longitude[0]-2)+poly2(f2_longitude[0]-2)), 0.5*(poly1(f1_longitude[-1])+poly2(f2_longitude[-1]))], "k", lw=2)
plt.annotate(date, (0.5*(f1_longitude[-1]+f2_longitude[-1]), 0.5*(poly1(f1_longitude[-1])+poly2(f2_longitude[-1]))),
			  textcoords="offset points", color="w", xytext=(10, 10), ha="center", bbox=dict(boxstyle="round", pad=0.5, fc="r", alpha=0.7))

ax = plt.gca()
ax.set_aspect("equal", adjustable="box")
outfolder = "./stations_maps/"
plt.savefig(outfolder+date+"-stations.pdf")
#+END_SRC 

#+NAME: plot_vTEC_map
#+BEGIN_SRC python :eval no :tangle ./plot_vTEC.py
# Mexico map plotter
# The main idea of this program was taken from 
# https://towardsdatascience.com/mapping-with-matplotlib-pandas-geopandas-and-basemap-in-python-d11b57ab5dac
# By Ashwani Dhankhar 
# And the shape file for Mexico from CONABIO
# http://www.conabio.gob.mx/informacion/metadata/gis/destdv250k_2gw.xml?_xsl=/db/meadata/xsl/fgdc_html.xsl&_indent=no

import seaborn as sns
import numpy as np
import pandas as pd
import shapefile as shp
import matplotlib.pyplot as plt
from plotfullmap import plot_map
import argparse
from astropy.table import Table
import glob
import matplotlib.cm as cm
import matplotlib.colors as colors
from scipy.interpolate import interp1d
from midpoint import MidpointNormalize



parser = argparse.ArgumentParser(
    description=""" Choose a file to work""")


parser.add_argument('--date', type=str, default='2000-01-01',
			       help='Choose date. Format: yyyy-mm-dd')

parser.add_argument("--formato", type=str, default="pdf", choices=("pdf", "png", "jpg"), 
                                help="Choose output format")

parser.add_argument("--log", action="store_true", help="Use logarithmic scale for vTEC")

cmd_args = parser.parse_args()
date = cmd_args.date
formato = cmd_args.formato
log = cmd_args.log
directory = "./data/"+date
p_directory = directory + "/previous/"
n_directory = directory+ "/next/"

# set figure style
sns.set_style("whitegrid") 
#sns.mpl.rc("figure", figsize=(10,6))

# Read shape file of Mexico map (deprecated)
#sf = shp.Reader("map.shp")
#plot_map(sf)


# Load RINEX capabilities

rinex_files = glob.glob(directory+"/*.Cmn")
std_files = glob.glob(directory+"/*.Std")
load_dirs = [open(rinex_files[i], "r") for i in range(len(rinex_files))]
load_std = [Table.read(std_files[i], format="ascii") for i in range(len(std_files))]

rinex_p = glob.glob(p_directory+"*.Cmn")
std_p = glob.glob(p_directory+"*.Std")
rinex_n = glob.glob(n_directory+"*.Cmn")
std_n = glob.glob(n_directory+"*.Std")

load_dir_p = [open(rinex_p[i], "r") for i in range(len(rinex_p))]
load_std_p = [Table.read(std_p[i], format="ascii") for i in range(len(std_p))]
load_dir_n = [open(rinex_n[i], "r") for i in range(len(rinex_n))]
load_std_n = [Table.read(std_n[i], format="ascii") for i in range(len(std_n))]

# Plot vTEC map
fig = plt.figure()
ax = fig.add_subplot(3, 2, 3, adjustable="box", aspect="equal")
ax1 = fig.add_subplot(3, 2, 4, adjustable="box")
axp = fig.add_subplot(3, 2, 1, adjustable="box", aspect="equal")
axp1 = fig.add_subplot(3, 2, 2, adjustable="box")
axn = fig.add_subplot(3, 2, 5, adjustable="box", aspect="equal")
axn1 = fig.add_subplot(3, 2, 6, adjustable="box")


# Load and plot event position and start time

load_meteor_pos = Table.read("meteors_database.tab", format="ascii")
meteor_mask = load_meteor_pos["Fecha"] == date
ax.plot(load_meteor_pos["Longitud"][meteor_mask], load_meteor_pos["Latitud"][meteor_mask], "mo")
#ax.annotate("Event", (load_meteor_pos["Longitud"][meteor_mask], load_meteor_pos["Latitud"][meteor_mask]),
#			textcoords="offset points", color="w", xytext=(10, 10), ha="center", bbox=dict(boxstyle="round", pad=0.5, fc="r", alpha=0.7))

t0_meteor_1 = load_meteor_pos["T_0 (GLM-16)"][meteor_mask]
t0_meteor_2 = load_meteor_pos["T_0 (GLM-17)"][meteor_mask]

if t0_meteor_1 == "N/A":
    t0_m1_h, t0_m1_m, t0_m1_s = (np.nan, np.nan, np.nan)
    t0_m2_h, t0_m2_m, t0_m2_s = t0_meteor_2[0].split(":")
elif t0_meteor_2 == "N/A":
    t0_m2_h, t0_m2_m, t0_m2_s = (np.nan, np.nan, np.nan)
    t0_m1_h, t0_m1_m, t0_m1_s = t0_meteor_1[0].split(":")
else: # convert start time from string to float (in hours)
    t0_m1_h, t0_m1_m, t0_m1_s = t0_meteor_1[0].split(":")
    t0_m2_h, t0_m2_m, t0_m2_s = t0_meteor_2[0].split(":")

t0_m1 = float(t0_m1_h) + float(t0_m1_m)/60. + float(t0_m1_s)/3600.
t0_m2 = float(t0_m2_h) + float(t0_m2_m)/60. + float(t0_m2_s)/3600.
#stations = []
# Load and plot RINEX data

for f, g, fp, gp, fn, gn in zip(load_dirs, load_std, load_dir_p, load_std_p, load_dir_n, load_std_n):
    header = f.readline()
    header_p = fp.readline()
    header_n = fn.readline()
    h1, h2 = header.split(",")
    station = h2.split("\\")[-1][0:4]
#    stations.append(station)
    blank = f.readline()
    blank = fp.readline()
    blank = fn.readline()
    s_coords = f.readline()
    s_coords_p = fp.readline()
    s_coords_n = fn.readline()
    s_latitude, s_longitude, s_altitude = s_coords.split()
    blank = f.readline()
    blank = fp.readline()
    blank = fn.readline()
    data  = f.readlines()
    data_p = fp.readlines()
    data_n = fn.readlines()
    obs_tab = Table.read(data, format="ascii")
    obs_tab_p = Table.read(data_p, format="ascii")
    obs_tab_n = Table.read(data_n, format="ascii")
    std_time = g["col1"]
    std_time_p = gp["col1"]
    std_time_n = gn["col1"]
    std_TEC = g["col2"]
    std_TEC_p = gp["col2"]
    std_TEC_n = gn["col2"]
    for i in range(len(obs_tab["Vtec"])): # Replace "-" into NaN since there is no data
        if obs_tab["Vtec"][i] == "-":
            obs_tab["Vtec"][i] = np.nan
    for i in range(len(obs_tab_p["Vtec"])):
        if obs_tab_p["Vtec"][i] == "-":
            obs_tab_p["Vtec"][i] = np.nan
    for i in range(len(obs_tab_n["Vtec"])):
        if obs_tab_n["Vtec"][i] == "-":
            obs_tab_n["Vtec"][i] = np.nan

    for i in range(len(std_TEC)):
        if std_TEC[i] == "-":
            std_TEC[i]=np.nan
    for i in range(len(std_TEC_p)):
        if std_TEC_p[i] == "-":
            std_TEC_p[i]=np.nan
    for i in range(len(std_TEC_n)):
        if std_TEC_n[i] == "-":
            std_TEC_n[i]=np.nan

    mean_TEC_int = interp1d(std_time, std_TEC)
    mean_TEC_int_p = interp1d(std_time_p, std_TEC_p)
    mean_TEC_int_n = interp1d(std_time_n, std_TEC_p)
    cmn_time = obs_tab["Time"]
    cmn_time_p = obs_tab_p["Time"]
    cmn_time_n = obs_tab_n["Time"]
    mask = cmn_time < 0
    mask_p = cmn_time_p < 0
    mask_n = cmn_time_n < 0
    cmn_time[mask] = cmn_time[mask] + 24.
    cmn_time_p[mask_p] = cmn_time_p[mask_p] + 24.0
    cmn_time_n[mask_n] = cmn_time_n[mask_n] + 24.0
    mask2 = cmn_time < max(std_time)
    mask2_p = cmn_time_p < max(std_time_p)
    mask2_n = cmn_time_n < max(std_time_n)
    dTEC = obs_tab["Vtec"][mask2] - mean_TEC_int(cmn_time[mask2])
    dTEC_p = obs_tab_p["Vtec"][mask2_p] - mean_TEC_int_p(cmn_time_p[mask2_p])
    dTEC_n = obs_tab_n["Vtec"][mask2_n] - mean_TEC_int_n(cmn_time_n[mask2_n])
    norm = MidpointNormalize(midpoint=0)
    if log ==True: 
        im1 = ax1.scatter(cmn_time[mask2], obs_tab["Lat"][mask2], s=1, c=dTEC, cmap="viridis", alpha=0.6, norm=colors.SymLogNorm(linthresh=0.03, linscale=0.03, base=10))
        im1_p = axp1.scatter(cmn_time_p[mask2_p], obs_tab_p["Lat"][mask2_p], s=1, c=dTEC_p, cmap="viridis", alpha=0.6, norm=colors.SymLogNorm(linthresh=0.03, linscale=0.03, base=10))
        im1_n = axn1.scatter(cmn_time_n[mask2_n], obs_tab_n["Lat"][mask2_n], s=1, c=dTEC_n, cmap="viridis", alpha=0.6, norm=colors.SymLogNorm(linthresh=0.03, linscale=0.03, base=10))
        im=ax.scatter(obs_tab["Lon"][mask2]-360, obs_tab["Lat"][mask2], s=1, c=dTEC, cmap="viridis",alpha=0.6, norm=colors.SymLogNorm(linthresh=0.03, linscale=0.03, base=10))
        im_p = axp.scatter(obs_tab_p["Lon"][mask2_p]-360, obs_tab_p["Lat"][mask2_p], s=1, c=dTEC_p, cmap="viridis", alpha=0.6, norm=colors.SymLogNorm(linthresh=0.03, linscale=0.03, base=10))
        im_n = axn.scatter(obs_tab_n["Lon"][mask2_n]-360, obs_tab_n["Lat"][mask2_n], s=1, c=dTEC_n, cmap="viridis", alpha=0.6, norm=colors.SymLogNorm(linthresh=0.03, linscale=0.03, base=10))
    else:
        im1=ax1.scatter(cmn_time[mask2], obs_tab["Lat"][mask2], s=1, c=dTEC, cmap="viridis", alpha=0.6, norm=norm)
        im1_p = axp1.scatter(cmn_time_p[mask2_p], obs_tab_p["Lat"][mask2_p], s=1, c=dTEC_p, cmap="viridis", alpha=0.6, norm=norm)
        im1_n = axn1.scatter(cmn_time_n[mask2_n], obs_tab_n["Lat"][mask2_n], s=1, c=dTEC_n, cmap="viridis", alpha=0.6, norm=norm)
        im=ax.scatter(obs_tab["Lon"][mask2]-360, obs_tab["Lat"][mask2], s=1, c=dTEC, cmap="viridis",alpha=0.6, norm=norm)
        im_p = axp.scatter(obs_tab_p["Lon"][mask2_p]-360, obs_tab_p["Lat"][mask2_p], s=1, c=dTEC_p, cmap="viridis", alpha=0.6, norm=norm)
        im_n = axn.scatter(obs_tab_n["Lon"][mask2_n]-360, obs_tab_n["Lat"][mask2_n], s=1, c=dTEC_n, cmap="viridis", alpha=0.6, norm=norm)



# Plot bolide trajectory

GLM16_file = open(directory+"/GLM/GLM-16-data.csv")
GLM17_file = open(directory+"/GLM/GLM-17-data.csv")

for i in range(10): # skip unneeded data
    GLM16_file.readline()
    GLM17_file.readline()

GLM16_data = GLM16_file.readlines()
GLM17_data = GLM17_file.readlines()
GLM16_table = Table.read(GLM16_data, format="ascii")
GLM17_table = Table.read(GLM17_data, format="ascii")

f1_longitude, f1_latitude = GLM16_table["longitude"], GLM16_table["latitude"]
f2_longitude, f2_latitude = GLM17_table["longitude"], GLM17_table["latitude"]


fit_coord1 = np.polyfit(f1_longitude, f1_latitude, 1)#nomial.Polynomial.fit(f1_longitude, f1_latitude, 1)
fit_coord2 = np.polyfit(f2_longitude, f2_latitude, 1)# polynomial.Polynomial.fit(f2_longitude, f2_latitude, 1)

#xfit1 = np.linspace(51*f1_longitude[0]-50*f1_longitude[-1], f1_longitude[-1])
#xfit2 = np.linspace(51*f2_longitude[0]-50*f2_longitude[-1], f2_longitude[-1])
#yfit1 = f1_latitude[-1] + fit_coord1[0]*(xfit1-f1_longitude[-1])
#yfit2 = f2_latitude[-1] + fit_coord2[0]*(xfit2-f2_longitude[-1])
#xfit1, yfit1 = fit_coord1.linspace()
#xfit2, yfit2 = fit_coord2.linspace()
#x_trajectory, y_trajectory = 0.5*(xfit1+xfit2), 0.5*(yfit1+yfit2)

poly1 = np.poly1d(fit_coord1)
poly2 = np.poly1d(fit_coord2)
ax.plot([0.5*(f1_longitude[0]+f2_longitude[0])-20, 0.5*(f1_longitude[-1]+f2_longitude[-1])], [0.5*(poly1(f1_longitude[0]-20)+poly2(f2_longitude[0]-20)), 0.5*(poly1(f1_longitude[-1])+poly2(f2_longitude[-1]))], "k", lw=2)
ax.plot([f1_longitude[0]-20, f1_longitude[-1]], [poly1(f1_longitude[0]-20), poly1(f1_longitude[-1])], "r--")
ax.plot([f2_longitude[0]-20, f2_longitude[-1]], [poly2(f2_longitude[0]-20), poly2(f2_longitude[-1])], "r--")

# Show the interval of time the event started

ax1.axvline(x=t0_m1, ls="--", c="k")
ax1.axvline(x=t0_m2, ls="--", c="k")
ax1.axvspan(min((t0_m1, t0_m2)), max((t0_m1, t0_m2)), alpha=0.5, color="red")

# add the second x-axis 

newlabel = [0, 5, 10, 15, 20, 25]
time_zone_dict = {"2019-05-23":-5, "2019-07-18":-5, "2019-08-10":-5, "2019-10-03":-5, "2019-10-09":-7, "2019-11-16":-6, "2019-11-17":-8, "2019-11-19":-7, "2019-11-26":-5, "2019-12-04":-7, "2019-12-15":-7, "2019-12-29":-8, "2020-01-03":-8, "2020-01-06":-7, "2020-01-15":-6, "2020-02-12":-6, "2020-03-03":-6, "2020-03-31":-7, "2020-04-08":-5, "2020-04-18":-6, "2020-04-20":-5, "2020-04-25":-7, "2020-04-28":-6, "2020-05-08":-5, "2020-07-15":-6, "2020-08-07":-6, "2020-09-13":-7, "2020-09-30":-7, "2020-11-16":-6, "2020-11-17":-6, "2020-12-19":-6, "2020-12-23":-7, "2020-12-29":-6, "2021-03-31":-6}

local_time = np.array(newlabel) + time_zone_dict[date]
for i in range(len(local_time)):
    if local_time[i] < 0.:
        local_time[i] = local_time[i] + 24.0
ax2 = ax1.twiny()
ax2.set_xticks(newlabel)
ax2.set_xticklabels(local_time)
#ax2.set_xlabel("Local Time (hours)")
ax2.set_xlim(ax1.get_xlim())

axp2 = axp1.twiny()
axp2.set_xticks(newlabel)
axp2.set_xticklabels(local_time)
axp2.set_xlabel("Local Time (hours)")
axp2.set_xlim(axp1.get_xlim())

axn2 = axn1.twiny()
axn2.set_xticks(newlabel)
axn2.set_xticklabels(local_time)
#axn2.set_xlabel("Local Time (hours)")
axn2.set_xlim(axn1.get_xlim())

# Daytime shaded in light yellow and night time in blue

# local sunrise and sunset dictionaries 

sunrise_p = {"2019-05-23":6+57./60, "2019-07-18":7+14./60, "2019-08-10":7+25./60, "2019-10-03":7+26/60., "2019-10-09":7+16./60, "2019-11-16": 7+18./60, "2019-11-17": 6+19/60., "2019-11-19": 7+ 6./60, "2019-11-26": 6+33/60., "2019-12-04": 7+17./60, "2019-12-15": 7+0./60, "2019-12-29": 6+46/60., "2020-01-03": 6+47./60, "2020-01-06": 7+ 7./60, "2020-01-15": 7+1./60, "2020-02-12": 6+41./60, "2020-03-03": 7+16./60, "2020-03-31": 6+16/60., "2020-04-08": 7+ 4./60, "2020-04-18": 6+37./60, "2020-04-20": 7+3./60, "2020-04-25": 5+44./60, "2020-04-28": 6+50./60, "2020-05-08": 6+42./60, "2020-07-15":6.5, "2020-08-07":6.5, "2020-09-13": 7+14./60, "2020-09-30":7+13./60, "2020-11-16": 6+52./60, "2020-11-17": 7+5./60, "2020-12-19":7+20./60, "2020-12-23": 7+ 1./60, "2020-12-29": 7+19/60., "2021-03-31": 6+ 8./60}


sunset_p = {"2019-05-23":20+24./60, "2019-07-18":20+45./60, "2019-08-10":20+23./60, "2019-10-03":19+17/60., "2019-10-09":19, "2019-11-16":17+52./60, "2019-11-17":16+45/60., "2019-11-19":18+14./60, "2019-11-26":17+19/60., "2019-12-04":17.5, "2019-12-15":20+6./60, "2019-12-29":16+49/60., "2020-01-03":16+53./60, "2020-01-06":17+15./60, "2020-01-15":18+5./60, "2020-02-12":18+10./60, "2020-03-03":19+2./60, "2020-03-31":18+40/60., "2020-04-08":19+42./60, "2020-04-18":19.5, "2020-04-20":20+2./60, "2020-04-25":18+58./60, "2020-04-28":19+47./60, "2020-05-08":19+33./60, "2020-07-15":20, "2020-08-07":19+49./60, "2020-09-13":19+35./60, "2020-09-30":19+8./60, "2020-11-16":17+59./60, "2020-11-17":18+4./60, "2020-12-19":18+5./60, "2020-12-23":17+38./60, "2020-12-29":18+21/60., "2021-03-31":18+23./60}

sunrise = {"2019-05-23":6+56./60, "2019-07-18":7+14./60, "2019-08-10":7+26./60, "2019-10-03":7+27/60., "2019-10-09":7+17./60, "2019-11-16": 7+19./60, "2019-11-17": 6+20/60., "2019-11-19": 7+ 6./60, "2019-11-26": 6+34/60., "2019-12-04": 7+18./60, "2019-12-15": 7+1./60, "2019-12-29": 6+46/60., "2020-01-03": 6+47./60, "2020-01-06": 7+ 7./60, "2020-01-15": 7+1./60, "2020-02-12": 6+41./60, "2020-03-03": 7+15./60, "2020-03-31": 6+15/60., "2020-04-08": 7+ 3./60, "2020-04-18": 6+36./60, "2020-04-20": 7+2./60, "2020-04-25": 5+43./60, "2020-04-28": 6+49./60, "2020-05-08": 6+42./60, "2020-07-15":6.5, "2020-08-07":6.5, "2020-09-13": 7+14./60, "2020-09-30":7+13./60, "2020-11-16": 6+53./60, "2020-11-17": 7+3./60, "2020-12-19":7+19./60, "2020-12-23": 7+ 2./60, "2020-12-29": 7+20/60., "2021-03-31": 6+ 7./60}

sunset = {"2019-05-23":20+25./60, "2019-07-18":20+45./60, "2019-08-10":20+22./60, "2019-10-03":19+16/60., "2019-10-09":18+59./60, "2019-11-16":17+52./60, "2019-11-17":16+45/60., "2019-11-19":18+14./60, "2019-11-26":17+19/60., "2019-12-04":17.5, "2019-12-15":20+5./60, "2019-12-29":16+50/60., "2020-01-03":16+53./60, "2020-01-06":17+15./60, "2020-01-15":18+5./60, "2020-02-12":18+10./60, "2020-03-03":19+2./60, "2020-03-31":18+40/60., "2020-04-08":19+43./60, "2020-04-18":19.5, "2020-04-20":20+3./60, "2020-04-25":18+59./60, "2020-04-28":19+48./60, "2020-05-08":19+34./60, "2020-07-15":20, "2020-08-07":19+49./60, "2020-09-13":19+34./60, "2020-09-30":19+7./60, "2020-11-16":17+59./60, "2020-11-17":18+4./60, "2020-12-19":18+6./60, "2020-12-23":17+39./60, "2020-12-29":18+22/60., "2021-03-31":18+24./60}

sunrise_n= {"2019-05-23":6+56./60, "2019-07-18":7+15./60, "2019-08-10":7+26./60, "2019-10-03":7+27/60., "2019-10-09":7+17./60, "2019-11-16": 7+20./60, "2019-11-17": 6+21/60., "2019-11-19": 7+ 6./60, "2019-11-26": 6+35/60., "2019-12-04": 7+19./60, "2019-12-15": 7+1./60, "2019-12-29": 6+46/60., "2020-01-03": 6+48./60, "2020-01-06": 7+ 7./60, "2020-01-15": 7+8./60, "2020-02-12": 6+40./60, "2020-03-03": 7+14./60, "2020-03-31": 6+13/60., "2020-04-08": 7+ 1./60, "2020-04-18": 6+35./60, "2020-04-20": 7+1./60, "2020-04-25": 5+42./60, "2020-04-28": 6+49./60, "2020-05-08": 6+41./60, "2020-07-15":6.5, "2020-08-07":6.5, "2020-09-13": 7+15./60, "2020-09-30":7+14./60, "2020-11-16": 6+53./60, "2020-11-17": 7+6./60, "2020-12-19":7+20./60, "2020-12-23": 7+ 2./60, "2020-12-29": 7+20/60., "2021-03-31": 6+ 6./60}

sunset_n = {"2019-05-23":20+25./60, "2019-07-18":20+44./60, "2019-08-10":20+21./60, "2019-10-03":19+15/60., "2019-10-09":18+58./60, "2019-11-16":17+52./60, "2019-11-17":16+44/60., "2019-11-19":18+13./60, "2019-11-26":17+19/60., "2019-12-04":17.5, "2019-12-15":20+4./60, "2019-12-29":16+51/60., "2020-01-03":16+54./60, "2020-01-06":17+16./60, "2020-01-15":18+5./60, "2020-02-12":18+10./60, "2020-03-03":19+3./60, "2020-03-31":18+41/60., "2020-04-08":19+44./60, "2020-04-18":19.5, "2020-04-20":20+3./60, "2020-04-25":19, "2020-04-28":19+48./60, "2020-05-08":19+34./60, "2020-07-15":20, "2020-08-07":19+48./60, "2020-09-13":19+33./60, "2020-09-30":19+6./60, "2020-11-16":17+59./60, "2020-11-17":18+4./60, "2020-12-19":18+7./60, "2020-12-23":17+39./60, "2020-12-29":18+22/60., "2021-03-31":18+24./60}

sunrise_p_UT = sunrise_p[date] - time_zone_dict[date]
sunset_p_UT = sunset_p[date] - time_zone_dict[date]
sunrise_UT = sunrise[date] - time_zone_dict[date]
sunset_UT = sunset[date] - time_zone_dict[date]
sunrise_n_UT = sunrise_n[date] - time_zone_dict[date]
sunset_n_UT = sunset_n[date] - time_zone_dict[date]


axp1.axvspan(0, sunrise_p_UT, alpha=0.1, color="cyan")
axp1.axvspan(sunrise_p_UT, min(sunset_p_UT, 24.0), alpha=0.1, color="yellow")
if sunset_p_UT < 24.0:
    axp1.axvspan(sunset_p_UT, 24.0, alpha=0.1, color="cyan")
ax1.axvspan(max(0, sunset_p_UT-24.0), sunrise_UT, alpha=0.1, color="cyan")
if sunset_p_UT-24 > 0:
    ax1.axvspan(0, sunset_p_UT-24, alpha=0.1, color="yellow")
ax1.axvspan(sunrise_UT, min(sunset_UT, 24.0), alpha=0.1, color="yellow")
if sunset_UT < 24.0:
    ax1.axvspan(sunset_UT, 24.0, alpha=0.1, color="cyan")
axn1.axvspan(max(0, sunset_UT-24.0), sunrise_n_UT, alpha=0.1, color="cyan")
if sunset_UT - 24.0 >0:
    axn1.axvspan(0, sunset_UT-24, alpha=0.1, color="yellow")
axn1.axvspan(sunrise_n_UT, 24.0, alpha=0.1, color="yellow")

# Plot settings

#ax = plt.gca()
#ax.set_aspect('equal', adjustable='box')
#plt.legend() 

label = "Detrended TEC for {} stations".format(len(rinex_files))
if log ==True:
    cbar = fig.colorbar(im, ax=ax, ticks=[-1e1, -1, -1e-1, 1e-1, 1, 1e1])
    cbar.ax.minorticks_on()
    cbar_p = fig.colorbar(im_p, ax=axp, ticks=[-1e1, -1, -1e-1, 1e-1, 1, 1e1])
    cbar_p.ax.minorticks_on()
    cbar_n = fig.colorbar(im_n, ax=axn, ticks=[-1e1, -1, -1e-1, 1e-1, 1, 1e1])
    cbar_n.ax.minorticks_on()
    cbar1 = fig.colorbar(im1, ax=ax1, ticks=[-1e1, -1, -1e-1, 1e-1, 1, 1e1])
    cbar1.ax.minorticks_on()
    cbar1_p = fig.colorbar(im1_p, ax=axp1, ticks=[-1e1, -1, -1e-1, 1e-1, 1, 1e1])
    cbar1_p.ax.minorticks_on()
    cbar1_n = fig.colorbar(im1_n, ax=axn1, ticks=[-1e1, -1, -1e-1, 1e-1, 1, 1e1])
    cbar1_n.ax.minorticks_on()
else:
    cbar = fig.colorbar(im, ax=ax)
    cbar_p = fig.colorbar(im_p, ax=axp)
    cbar_n = fig.colorbar(im_n, ax=axn)
    cbar1 = fig.colorbar(im1, ax=ax1)
    cbar1_p = fig.colorbar(im1_p, ax=axp1)
    cbar1_n = fig.colorbar(im1_n, ax=axn1)

cbar.set_label("Delta vTEC (TECU)")
cbar_p.set_label("Delta vTEC (TECU)")
cbar_n.set_label("Delta vTEC (TECU)")
cbar1.set_label("Delta vTEC (TECU)")
cbar1_p.set_label("Delta vTEC (TECU)")
cbar1_n.set_label("Delta vTEC (TECU)")
out_dir = "./vTEC-maps/"
axn.set_xlabel("Longitude (deg)")
ax.set_ylabel("Latitude (deg)")
axp.set_ylabel("Latitude (deg)")
axn.set_ylabel("Latitude (deg)")
axn1.set_xlabel("Universal Time (hours)")
plt.suptitle(date+" vTEC map")
ax1.set_ylabel("Latitude (deg)")
axp1.set_ylabel("Latitude (deg)")
axn1.set_ylabel("Latitude (deg)")
axp.title.set_text(label + ". Previous day")
axp1.title.set_text(label)
ax.title.set_text(label + ". Event date")
#ax1.title.set_text(label)
axn.title.set_text(label+". Next day")
#axn1.title.set_text(label)
fig.set_size_inches(22, 18)
#fig.tight_layout()
if log ==True:
    plt.savefig(out_dir+date+"-vTEC_logmap."+formato)
else:
    plt.savefig(out_dir+date+"-vTEC_map."+formato)

#+END_SRC 

#+NAME: Kp_index
#+BEGIN_SRC python :eval no :tangle ./Kp-index.py

  import numpy as np
  import matplotlib.pyplot as plt
  import argparse

  # Get and plot planetary K index for a determined set of dates

  parser = argparse.ArgumentParser(
	description=""" Choose a file to work""")


  parser.add_argument('--date', type=str, default='2000-01-01',
			help='Choose date. Format: yyyy-mm-dd')

  parser.add_argument('--datep', type=str, default='2000-01-01',
			help='Choose date. Format: yyyy-mm-dd')

  parser.add_argument('--datepp', type=str, default='2000-01-01',
			help='Choose date. Format: yyyy-mm-dd')


  parser.add_argument("--ftpfile", type=str, default="Q4", 
		      help="choose the file with the corresponding Kp index data")


  #Capture data from command line

  cmd_args = parser.parse_args()
  date = cmd_args.date
  datep = cmd_args.datep # Previous day to impact date
  datepp = cmd_args.datepp # 2 days before impact date
  year = date.split("-")[0]
  ftpfile = year+cmd_args.ftpfile+"_DGD.txt"

  # Read and load data from Kp index text file

  f = open(ftpfile, "r")

  ## Skip first 12 rows

  f.readline()
  f.readline()
  f.readline()
  f.readline()
  f.readline()
  f.readline()
  f.readline()
  f.readline()
  f.readline()
  f.readline()
  f.readline()
  f.readline()

  ## Load data

  raw_data = f.readlines()

  # Select desired dates from the whole data

  kp = []

  for d in raw_data:
      k_date = d.split()[0:3]
      kdate = k_date[0]+"-"+ k_date[1]+"-"+k_date[2]
      if((kdate==date)|(kdate==datep)|(kdate==datepp)):
	 kp.append(d.split()[-8:])


  # Reshape array to be unidimensional

  Kp = np.array(kp).reshape(24,)

  # Convert array elements from strings to integers

  Kp = [int(k) for k in Kp]

  # Start plotting. The output will be a bar graph

  ## Set x coords

  x = np.arange(len(Kp))

  ## Plot bar graph
  bar = plt.bar(x, Kp, width=0.5)

  ## Set graph limits
  plt.xlim(-0.5, 24)
  plt.ylim(0, 9)

  ## Set ticks in both axis

  plt.xticks([0, 7.5, 15.5], [datepp, datep, date])
  plt.yticks(np.arange(10))

  ## Set vertical lines at the beginning of each day (00:00 UTC)

  plt.axvline(x=7.5, ls="--", c="k")
  plt.axvline(x=15.5, ls="--", c="k")


  ## Set different color to bars according to Kp index value

  for i in range(24):
      if Kp[i]==4:
	 bar[i].set_color("y")
      elif Kp[i] > 4:
	 bar[i].set_color("r")
      else:
	 bar[i].set_color("g")

  ## Set label to axis and graph title

  plt.ylabel("Kp Index")
  plt.title("Estimated Planetary K Index (3 hours data). Begin {} UTC".format(datepp))

  # Save graph

  plt.savefig("./Kp index/"+date+" Kp index.pdf")

#+END_SRC

#+NAME: TEC vs Time
#+BEGIN_SRC python :eval no :tangle ./TEC_vs_time.py

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from astropy.table import Table
import argparse
import glob

# Goal of this program: Obtain TEC vs time plots and analyze them in order to check if we can derive some kind
# of parameter to quantify the TEC perturbations

# We must recycle a lot of the code lines from plot_vTEC.py

parser = argparse.ArgumentParser(
    description=""" Choose a file to work""")


parser.add_argument('--date', type=str, default='2000-01-01',
				   help='Choose date. Format: yyyy-mm-dd')



cmd_args = parser.parse_args()
date = cmd_args.date


directory = "./data/"+date
p_directory = directory + "/previous/"
n_directory = directory+ "/next/"

# set figure style
sns.set_style("whitegrid") 

# Load RINEX capabilities


std_files = glob.glob(directory+"/*.Std")
load_std = [Table.read(std_files[i], format="ascii") for i in range(len(std_files))]


std_p = glob.glob(p_directory+"*.Std")
std_n = glob.glob(n_directory+"*.Std")

load_std_p = [Table.read(std_p[i], format="ascii") for i in range(len(std_p))]
load_std_n = [Table.read(std_n[i], format="ascii") for i in range(len(std_n))]

# Get the data and plot

fig = plt.figure()
j=1
for f, fp, fn in zip(load_std, load_std_p, load_std_n):
    std_time = f["col1"]
    std_time_p = fp["col1"]
    std_time_n = fn["col1"]
    std_TEC = f["col2"]
    std_TEC_p = fp["col2"]
    std_TEC_n = fn["col2"]

    for i in range(len(std_TEC)):
        if std_TEC[i] == "-":
            std_TEC[i]=np.nan
    for i in range(len(std_TEC_p)):
        if std_TEC_p[i] == "-":
            std_TEC_p[i]=np.nan
    for i in range(len(std_TEC_n)):
        if std_TEC_n[i] == "-":
            std_TEC_n[i]=np.nan

    avg_TEC = np.array([std_TEC_p, std_TEC, std_TEC_n])
    avg_TEC = np.reshape(avg_TEC, len(std_TEC_p)+len(std_TEC)+len(std_TEC_n))

    avg_time = np.array([std_time_p, std_time+24.0, std_time_n+48.0])
    avg_time = np.reshape(avg_time, len(std_time_p)+len(std_time)+len(std_time_n))
    plt.plot(avg_time, avg_TEC)   
    ax.set_ylim(0, 40)

fig.savefig("TEC.pdf")
#+END_SRC

#+NAME: Meteor Energy
#+BEGIN_SRC python :eval no :tangle ./GLM_energy.py

import numpy as np
from astropy.table import Table
import glob

# The goal of this program is to estimate the total energy and peak energy
# from GLM data

# Methodology: sum all the values from the energy column of GLM data and also
# get the maximum value. Both should be outputs of the program

# Get a list of the paths of al GLM data

dates = ["2019-05-23", "2019-07-18", "2019-08-10", "2019-10-03", "2019-10-09", "2019-11-16", "2019-11-17", "2019-11-19", "2019-11-26", "2019-12-04", "2019-12-15", "2019-12-29", "2020-01-03", "2020-01-06", "2020-01-15", "2020-02-12", "2020-03-03", "2020-03-31", "2020-04-08", "2020-04-18", "2020-04-20", "2020-04-25", "2020-04-28", "2020-05-08", "2020-07-15", "2020-08-07", "2020-09-13","2020-09-30", "2020-11-16", "2020-11-17", "2020-12-19","2020-12-23", "2020-12-29", "2021-03-31"]

G16_dirs = [] 
G17_dirs = []
root_folder = "./data/"
common_folder = "/GLM/"
for date in dates:
    g16 = glob.glob(root_folder+date+common_folder+"*16*")
    g17 = glob.glob(root_folder+date+common_folder+"*17*")
    G16_dirs.append(g16[0])
    G17_dirs.append(g17[0])
# initialize output arrays
g16_total_energy_array = []
g17_total_energy_array = []


#initialize loop for data adquisition

for g16, g17 in zip(G16_dirs, G17_dirs):
    data16 = open(g16, "r")
    data17 = open(g17, "r")

    for i in range(10): # skip unneded data
        data16.readline()
        data17.readline()

    # gather the table with meteor info
    g16data = data16.readlines()
    g17data = data17.readlines()

    g16table = Table.read(g16data, format="ascii")
    g17table = Table.read(g17data, format="ascii")

    # estimate peak energy and total energy for each satellite
    g16_total_energy = np.sum(g16table["energy (joules)"])
    g16_total_energy_array.append(g16_total_energy)
    g17_total_energy = np.sum(g17table["energy (joules)"])
    g17_total_energy_array.append(g17_total_energy)


print("Date (yyyy-mm-dd)", "GLM-16 total energy (joules)","GLM-17 total energy (joules)")
for date, g16_total, g17_total in zip(dates, g16_total_energy_array, g17_total_energy_array):
    print(date, g16_total, g17_total)
  
#+END_SRC

#+NAME: Change coordinates
#+BEGIN_SRC python :eval no :tangle ./h_to_eq.py

  # This program is aimed to change from horizontal coordinates to equatorial coordinates
  # Horizontal coordinates of events are got from AMS data and equatorial coordinates would give us 
  # the place where the event could be seen at the zenith. If we get an event with two or more
  # witnesses we could find a parallax and thus estimate the altitude

  import numpy as np
  from scipy.optimize import fsolve
  import argparse


  def equations(q, Al, Az, Lat):
      """
      Set of equations to solve
      """

      x, y, z = q
      k1 = np.sin(Az)*np.cos(Al)
      k2 = np.cos(Az)*np.cos(Al)*np.sin(Lat) + np.sin(Al)*np.cos(Lat)
      k3 = -np.cos(Az)*np.cos(Al)*np.cos(Lat) + np.sin(Al)*np.sin(Lat)
      return (x*z - k1, y*z - k2, 1 - z**2 - k3**2) 

  # Input data

  parser = argparse.ArgumentParser(description= "Insert local coordinates of events")
  parser.add_argument("--latitude", type=float, help="Local latitude of observer (in degrees)")
  parser.add_argument("--longitude", type=float, help="Local longitude of observer (in degrees)")
  parser.add_argument("--azimuth", type=float, help="Azimuth of the event (in degrees)")
  parser.add_argument("--altitude", type=float, help="Altitude of the event (in degrees)")
  parser.add_argument("--h0", type=float, default=0, help="Initial guess of hour angle (in degrees)")
  parser.add_argument("-d0", type=float, help="Initial guess of declination (in degrees)")

  cmd_args = parser.parser_args()
  l_latitude = cmd_args.latitude
  azimuth = cmd_args.azimuth
  altitude = cmd_args.altitude
  h0 = cmd_args.h0
  delta0 = cmd_args.d0
  l_longitude = cmd_args.longitude

  # set initial guess

  x0 = np.sin(np.radians(h0))
  y0 = np.cos(np.radians(h0))
  z0 = np.cos(np.radians(delta0))

  # solve the system

  sol = fsolve(equations, (x0, y0, z0), args=(np.radians(altitude), np.radians(azimuth), np.radians(l_latitude)))

  # translate solution into (latitude, longitude)

  latitude = np.degrees(np.arccos(z) -0.5*np.pi) # Arc cosine range is from 0 tp \pi and latitude is shifted 90 degrees

  if x>=0: # if sin(h) is positive, then 0 <= h <= 180
      h = np.arccos(y)
  else: # if sin(h) is negative, then 180 < h < 360
      h = np.arccos(y) + np.pi


  # move to a longitude where h=0 (and thus we may see the event at the zenith)

  longitude = l_longitude - np.degrees(h)
#+END_SRC
